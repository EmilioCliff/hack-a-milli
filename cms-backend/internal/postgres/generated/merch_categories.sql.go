// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: merch_categories.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countProductCategories = `-- name: CountProductCategories :one
SELECT COUNT(*) AS total_product_categories
FROM product_categories
WHERE 
    deleted_at IS NULL
    AND (
        COALESCE($1::text, '') = '' 
        OR LOWER(name) LIKE $1
        OR LOWER(description) LIKE $1
    )
`

func (q *Queries) CountProductCategories(ctx context.Context, search pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, countProductCategories, search)
	var total_product_categories int64
	err := row.Scan(&total_product_categories)
	return total_product_categories, err
}

const createProductCategory = `-- name: CreateProductCategory :one
INSERT INTO product_categories (name, description, updated_by, created_by)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateProductCategoryParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	UpdatedBy   int64       `json:"updated_by"`
	CreatedBy   int64       `json:"created_by"`
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (int64, error) {
	row := q.db.QueryRow(ctx, createProductCategory,
		arg.Name,
		arg.Description,
		arg.UpdatedBy,
		arg.CreatedBy,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteProductCategory = `-- name: DeleteProductCategory :exec
UPDATE product_categories
SET 
    deleted_at = NOW(), 
    deleted_by = $1
WHERE id = $2
`

type DeleteProductCategoryParams struct {
	DeletedBy pgtype.Int8 `json:"deleted_by"`
	ID        int64       `json:"id"`
}

func (q *Queries) DeleteProductCategory(ctx context.Context, arg DeleteProductCategoryParams) error {
	_, err := q.db.Exec(ctx, deleteProductCategory, arg.DeletedBy, arg.ID)
	return err
}

const getProductCategory = `-- name: GetProductCategory :one
SELECT id, name, description, created_by, updated_by, deleted_by, deleted_at, updated_at, created_at FROM product_categories
WHERE id = $1
`

func (q *Queries) GetProductCategory(ctx context.Context, id int64) (ProductCategory, error) {
	row := q.db.QueryRow(ctx, getProductCategory, id)
	var i ProductCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listProductCategories = `-- name: ListProductCategories :many
SELECT id, name, description, created_by, updated_by, deleted_by, deleted_at, updated_at, created_at FROM product_categories
WHERE 
    deleted_at IS NULL
    AND (
        COALESCE($1::text, '') = '' 
        OR LOWER(name) LIKE $1
        OR LOWER(description) LIKE $1
    )
ORDER BY created_at DESC
LIMIT $3 OFFSET $2
`

type ListProductCategoriesParams struct {
	Search pgtype.Text `json:"search"`
	Offset int32       `json:"offset"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) ListProductCategories(ctx context.Context, arg ListProductCategoriesParams) ([]ProductCategory, error) {
	rows, err := q.db.Query(ctx, listProductCategories, arg.Search, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductCategory{}
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
			&i.DeletedAt,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const productCategoryExists = `-- name: ProductCategoryExists :one
SELECT EXISTS (SELECT 1 FROM product_categories WHERE id = $1 AND deleted_at IS NULL) AS exists
`

func (q *Queries) ProductCategoryExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, productCategoryExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateProductCategory = `-- name: UpdateProductCategory :one
UPDATE product_categories
SET name = COALESCE($1, name),
    description = COALESCE($2, description),
    updated_by = $3,
    updated_at = NOW()
WHERE id = $4
RETURNING id, name, description, created_by, updated_by, deleted_by, deleted_at, updated_at, created_at
`

type UpdateProductCategoryParams struct {
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
	UpdatedBy   int64       `json:"updated_by"`
	ID          int64       `json:"id"`
}

func (q *Queries) UpdateProductCategory(ctx context.Context, arg UpdateProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRow(ctx, updateProductCategory,
		arg.Name,
		arg.Description,
		arg.UpdatedBy,
		arg.ID,
	)
	var i ProductCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
