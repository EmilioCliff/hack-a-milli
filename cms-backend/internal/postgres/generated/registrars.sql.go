// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: registrars.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countRegistrars = `-- name: CountRegistrars :one
SELECT COUNT(*) AS total_registrars
FROM registrars
WHERE 
    deleted_at IS NULL
    AND (
        COALESCE($1, '') = '' 
        OR LOWER(name) LIKE $1
        OR LOWER(email) LIKE $1
        OR LOWER(address) LIKE $1
        OR LOWER(website_url) LIKE $1
    )
    AND (
        $2::text[] IS NULL 
        OR specialities = ANY($2::text[])
    )
`

type CountRegistrarsParams struct {
	Search       interface{} `json:"search"`
	Specialities []string    `json:"specialities"`
}

func (q *Queries) CountRegistrars(ctx context.Context, arg CountRegistrarsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countRegistrars, arg.Search, arg.Specialities)
	var total_registrars int64
	err := row.Scan(&total_registrars)
	return total_registrars, err
}

const createRegistrar = `-- name: CreateRegistrar :one
INSERT INTO registrars (email, name, logo_url, address, specialities, phone_number, website_url, updated_by, created_by)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type CreateRegistrarParams struct {
	Email        string   `json:"email"`
	Name         string   `json:"name"`
	LogoUrl      string   `json:"logo_url"`
	Address      string   `json:"address"`
	Specialities []string `json:"specialities"`
	PhoneNumber  string   `json:"phone_number"`
	WebsiteUrl   string   `json:"website_url"`
	UpdatedBy    int64    `json:"updated_by"`
	CreatedBy    int64    `json:"created_by"`
}

func (q *Queries) CreateRegistrar(ctx context.Context, arg CreateRegistrarParams) (int64, error) {
	row := q.db.QueryRow(ctx, createRegistrar,
		arg.Email,
		arg.Name,
		arg.LogoUrl,
		arg.Address,
		arg.Specialities,
		arg.PhoneNumber,
		arg.WebsiteUrl,
		arg.UpdatedBy,
		arg.CreatedBy,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteRegistrar = `-- name: DeleteRegistrar :exec
UPDATE registrars
SET 
    deleted_at = NOW(), 
    deleted_by = $1
WHERE id = $2
`

type DeleteRegistrarParams struct {
	DeletedBy pgtype.Int8 `json:"deleted_by"`
	ID        int64       `json:"id"`
}

func (q *Queries) DeleteRegistrar(ctx context.Context, arg DeleteRegistrarParams) error {
	_, err := q.db.Exec(ctx, deleteRegistrar, arg.DeletedBy, arg.ID)
	return err
}

const getRegistrar = `-- name: GetRegistrar :one
SELECT id, email, name, logo_url, address, specialities, phone_number, website_url, updated_by, created_by, deleted_by, deleted_at, updated_at, created_at FROM registrars
WHERE id = $1
`

func (q *Queries) GetRegistrar(ctx context.Context, id int64) (Registrar, error) {
	row := q.db.QueryRow(ctx, getRegistrar, id)
	var i Registrar
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.LogoUrl,
		&i.Address,
		&i.Specialities,
		&i.PhoneNumber,
		&i.WebsiteUrl,
		&i.UpdatedBy,
		&i.CreatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listRegistrars = `-- name: ListRegistrars :many
SELECT id, email, name, logo_url, address, specialities, phone_number, website_url, updated_by, created_by, deleted_by, deleted_at, updated_at, created_at FROM registrars
WHERE 
    deleted_at IS NULL
    AND (
        COALESCE($1, '') = '' 
        OR LOWER(name) LIKE $1
        OR LOWER(email) LIKE $1
        OR LOWER(address) LIKE $1
        OR LOWER(website_url) LIKE $1
    )
    AND (
        $2::text[] IS NULL 
        OR specialities = ANY($2::text[])
    )
ORDER BY created_at DESC
LIMIT $4 OFFSET $3
`

type ListRegistrarsParams struct {
	Search       interface{} `json:"search"`
	Specialities []string    `json:"specialities"`
	Offset       int32       `json:"offset"`
	Limit        int32       `json:"limit"`
}

func (q *Queries) ListRegistrars(ctx context.Context, arg ListRegistrarsParams) ([]Registrar, error) {
	rows, err := q.db.Query(ctx, listRegistrars,
		arg.Search,
		arg.Specialities,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Registrar{}
	for rows.Next() {
		var i Registrar
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.LogoUrl,
			&i.Address,
			&i.Specialities,
			&i.PhoneNumber,
			&i.WebsiteUrl,
			&i.UpdatedBy,
			&i.CreatedBy,
			&i.DeletedBy,
			&i.DeletedAt,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRegistrar = `-- name: UpdateRegistrar :one
UPDATE registrars
SET email = COALESCE($1, email),
    name = COALESCE($2, name),
    logo_url = COALESCE($3, logo_url),
    address = COALESCE($4, address),
    specialities = COALESCE($5, specialities),
    phone_number = COALESCE($6, phone_number),
    website_url = COALESCE($7, website_url),
    updated_by = $8,
    updated_at = NOW()
WHERE id = $9
RETURNING id, email, name, logo_url, address, specialities, phone_number, website_url, updated_by, created_by, deleted_by, deleted_at, updated_at, created_at
`

type UpdateRegistrarParams struct {
	Email        pgtype.Text `json:"email"`
	Name         pgtype.Text `json:"name"`
	LogoUrl      pgtype.Text `json:"logo_url"`
	Address      pgtype.Text `json:"address"`
	Specialities []string    `json:"specialities"`
	PhoneNumber  pgtype.Text `json:"phone_number"`
	WebsiteUrl   pgtype.Text `json:"website_url"`
	UpdatedBy    int64       `json:"updated_by"`
	ID           int64       `json:"id"`
}

func (q *Queries) UpdateRegistrar(ctx context.Context, arg UpdateRegistrarParams) (Registrar, error) {
	row := q.db.QueryRow(ctx, updateRegistrar,
		arg.Email,
		arg.Name,
		arg.LogoUrl,
		arg.Address,
		arg.Specialities,
		arg.PhoneNumber,
		arg.WebsiteUrl,
		arg.UpdatedBy,
		arg.ID,
	)
	var i Registrar
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.LogoUrl,
		&i.Address,
		&i.Specialities,
		&i.PhoneNumber,
		&i.WebsiteUrl,
		&i.UpdatedBy,
		&i.CreatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
