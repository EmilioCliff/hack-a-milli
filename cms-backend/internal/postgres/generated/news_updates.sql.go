// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: news_updates.sql

package generated

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const countNewsUpdates = `-- name: CountNewsUpdates :one
SELECT COUNT(*) FROM news_updates
WHERE 
    deleted_at IS NULL
    AND (
        COALESCE($1::text, '') = '' 
        OR LOWER(title) LIKE $1
        OR LOWER(topic) LIKE $1
    )
    AND (
        $2::boolean IS NULL 
        OR published = $2
    )
    AND (
        slqc.narg('start_date')::timestamptz IS NULL 
        OR date >= $3
    )
    AND (
        $4::timestamptz IS NULL 
        OR date <= $4
    )
`

type CountNewsUpdatesParams struct {
	Search    pgtype.Text        `json:"search"`
	Published pgtype.Bool        `json:"published"`
	StartDate pgtype.Timestamptz `json:"start_date"`
	EndDate   pgtype.Timestamptz `json:"end_date"`
}

func (q *Queries) CountNewsUpdates(ctx context.Context, arg CountNewsUpdatesParams) (int64, error) {
	row := q.db.QueryRow(ctx, countNewsUpdates,
		arg.Search,
		arg.Published,
		arg.StartDate,
		arg.EndDate,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createNewsUpdate = `-- name: CreateNewsUpdate :one
INSERT INTO news_updates (title, topic, date, min_read, content, cover_img, updated_by, created_by)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id
`

type CreateNewsUpdateParams struct {
	Title     string    `json:"title"`
	Topic     string    `json:"topic"`
	Date      time.Time `json:"date"`
	MinRead   int32     `json:"min_read"`
	Content   string    `json:"content"`
	CoverImg  string    `json:"cover_img"`
	UpdatedBy int64     `json:"updated_by"`
	CreatedBy int64     `json:"created_by"`
}

func (q *Queries) CreateNewsUpdate(ctx context.Context, arg CreateNewsUpdateParams) (int64, error) {
	row := q.db.QueryRow(ctx, createNewsUpdate,
		arg.Title,
		arg.Topic,
		arg.Date,
		arg.MinRead,
		arg.Content,
		arg.CoverImg,
		arg.UpdatedBy,
		arg.CreatedBy,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteNewsUpdate = `-- name: DeleteNewsUpdate :exec
UPDATE news_updates
SET deleted_at = NOW(),
    deleted_by = $1
WHERE id = $2
`

type DeleteNewsUpdateParams struct {
	DeletedBy pgtype.Int8 `json:"deleted_by"`
	ID        int64       `json:"id"`
}

func (q *Queries) DeleteNewsUpdate(ctx context.Context, arg DeleteNewsUpdateParams) error {
	_, err := q.db.Exec(ctx, deleteNewsUpdate, arg.DeletedBy, arg.ID)
	return err
}

const getNewsUpdate = `-- name: GetNewsUpdate :one
SELECT id, title, topic, date, min_read, content, cover_img, published, published_at, updated_by, created_by, deleted_by, deleted_at, updated_at, created_at FROM news_updates
WHERE id = $1
`

func (q *Queries) GetNewsUpdate(ctx context.Context, id int64) (NewsUpdate, error) {
	row := q.db.QueryRow(ctx, getNewsUpdate, id)
	var i NewsUpdate
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Date,
		&i.MinRead,
		&i.Content,
		&i.CoverImg,
		&i.Published,
		&i.PublishedAt,
		&i.UpdatedBy,
		&i.CreatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listNewsUpdates = `-- name: ListNewsUpdates :many
SELECT id, title, topic, date, min_read, content, cover_img, published, published_at, updated_by, created_by, deleted_by, deleted_at, updated_at, created_at FROM news_updates
WHERE 
    deleted_at IS NULL
    AND (
        COALESCE($1::text, '') = '' 
        OR LOWER(title) LIKE $1
        OR LOWER(topic) LIKE $1
    )
    AND (
        $2::boolean IS NULL 
        OR published = $2
    )
    AND (
        slqc.narg('start_date')::timestamptz IS NULL 
        OR date >= $3
    )
    AND (
        $4::timestamptz IS NULL 
        OR date <= $4
    )
ORDER BY created_at DESC
LIMIT $6 OFFSET $5
`

type ListNewsUpdatesParams struct {
	Search    pgtype.Text        `json:"search"`
	Published pgtype.Bool        `json:"published"`
	StartDate pgtype.Timestamptz `json:"start_date"`
	EndDate   pgtype.Timestamptz `json:"end_date"`
	Offset    int32              `json:"offset"`
	Limit     int32              `json:"limit"`
}

func (q *Queries) ListNewsUpdates(ctx context.Context, arg ListNewsUpdatesParams) ([]NewsUpdate, error) {
	rows, err := q.db.Query(ctx, listNewsUpdates,
		arg.Search,
		arg.Published,
		arg.StartDate,
		arg.EndDate,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []NewsUpdate{}
	for rows.Next() {
		var i NewsUpdate
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Topic,
			&i.Date,
			&i.MinRead,
			&i.Content,
			&i.CoverImg,
			&i.Published,
			&i.PublishedAt,
			&i.UpdatedBy,
			&i.CreatedBy,
			&i.DeletedBy,
			&i.DeletedAt,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishNewsUpdate = `-- name: PublishNewsUpdate :one
UPDATE news_updates
SET published = TRUE,
    published_at = NOW(),
    updated_by = $1,
    updated_at = NOW()
WHERE id = $2
RETURNING id, title, topic, date, min_read, content, cover_img, published, published_at, updated_by, created_by, deleted_by, deleted_at, updated_at, created_at
`

type PublishNewsUpdateParams struct {
	UpdatedBy int64 `json:"updated_by"`
	ID        int64 `json:"id"`
}

func (q *Queries) PublishNewsUpdate(ctx context.Context, arg PublishNewsUpdateParams) (NewsUpdate, error) {
	row := q.db.QueryRow(ctx, publishNewsUpdate, arg.UpdatedBy, arg.ID)
	var i NewsUpdate
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Date,
		&i.MinRead,
		&i.Content,
		&i.CoverImg,
		&i.Published,
		&i.PublishedAt,
		&i.UpdatedBy,
		&i.CreatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateNewsUpdate = `-- name: UpdateNewsUpdate :exec
UPDATE news_updates
SET title = COALESCE($1, title),
    topic = COALESCE($2, topic),
    date = COALESCE($3, date),
    min_read = COALESCE($4, min_read),
    content = COALESCE($5, content),
    cover_img = COALESCE($6, cover_img),
    updated_by = $7,
    updated_at = NOW()
WHERE id = $8
`

type UpdateNewsUpdateParams struct {
	Title     pgtype.Text        `json:"title"`
	Topic     pgtype.Text        `json:"topic"`
	Date      pgtype.Timestamptz `json:"date"`
	MinRead   pgtype.Int4        `json:"min_read"`
	Content   pgtype.Text        `json:"content"`
	CoverImg  pgtype.Text        `json:"cover_img"`
	UpdatedBy int64              `json:"updated_by"`
	ID        int64              `json:"id"`
}

func (q *Queries) UpdateNewsUpdate(ctx context.Context, arg UpdateNewsUpdateParams) error {
	_, err := q.db.Exec(ctx, updateNewsUpdate,
		arg.Title,
		arg.Topic,
		arg.Date,
		arg.MinRead,
		arg.Content,
		arg.CoverImg,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
