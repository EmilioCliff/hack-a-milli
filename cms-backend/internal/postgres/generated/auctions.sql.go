// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auctions.sql

package generated

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkAuctionDomainExistsAndActive = `-- name: CheckAuctionDomainExistsAndActive :one
SELECT EXISTS(SELECT 1 FROM auctions WHERE domain = $1 AND status = 'active') AS exists
`

func (q *Queries) CheckAuctionDomainExistsAndActive(ctx context.Context, domain string) (bool, error) {
	row := q.db.QueryRow(ctx, checkAuctionDomainExistsAndActive, domain)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countAuctions = `-- name: CountAuctions :one
SELECT  COUNT(*) AS total_auctions
FROM auctions
WHERE (
        COALESCE($1::text, '') = '' 
        OR LOWER(domain) LIKE $1
        OR LOWER(description) LIKE $1
    )
    AND (
        $2::text IS NULL 
        OR category = $2
    )
    AND (
        $3::text IS NULL 
        OR status = $3
    )
`

type CountAuctionsParams struct {
	Search   pgtype.Text `json:"search"`
	Category pgtype.Text `json:"category"`
	Status   pgtype.Text `json:"status"`
}

func (q *Queries) CountAuctions(ctx context.Context, arg CountAuctionsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAuctions, arg.Search, arg.Category, arg.Status)
	var total_auctions int64
	err := row.Scan(&total_auctions)
	return total_auctions, err
}

const createAuction = `-- name: CreateAuction :one
INSERT INTO auctions (domain, category, description, current_bid, start_price, start_time, end_time, created_by, updated_by)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, domain, category, description, current_bid, start_price, start_time, end_time, watchers, bids_count, status, created_by, created_at, updated_by, updated_at
`

type CreateAuctionParams struct {
	Domain      string         `json:"domain"`
	Category    string         `json:"category"`
	Description string         `json:"description"`
	CurrentBid  pgtype.Numeric `json:"current_bid"`
	StartPrice  pgtype.Numeric `json:"start_price"`
	StartTime   time.Time      `json:"start_time"`
	EndTime     time.Time      `json:"end_time"`
	CreatedBy   int64          `json:"created_by"`
	UpdatedBy   int64          `json:"updated_by"`
}

func (q *Queries) CreateAuction(ctx context.Context, arg CreateAuctionParams) (Auction, error) {
	row := q.db.QueryRow(ctx, createAuction,
		arg.Domain,
		arg.Category,
		arg.Description,
		arg.CurrentBid,
		arg.StartPrice,
		arg.StartTime,
		arg.EndTime,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Auction
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Category,
		&i.Description,
		&i.CurrentBid,
		&i.StartPrice,
		&i.StartTime,
		&i.EndTime,
		&i.Watchers,
		&i.BidsCount,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAuction = `-- name: DeleteAuction :exec
UPDATE auctions
SET status = 'cancelled',
    updated_by = $2,
    updated_at = now()
WHERE id = $1
`

type DeleteAuctionParams struct {
	ID        int64 `json:"id"`
	UpdatedBy int64 `json:"updated_by"`
}

func (q *Queries) DeleteAuction(ctx context.Context, arg DeleteAuctionParams) error {
	_, err := q.db.Exec(ctx, deleteAuction, arg.ID, arg.UpdatedBy)
	return err
}

const getAuctionByID = `-- name: GetAuctionByID :one
SELECT id, domain, category, description, current_bid, start_price, start_time, end_time, watchers, bids_count, status, created_by, created_at, updated_by, updated_at FROM auctions
WHERE id = $1
`

func (q *Queries) GetAuctionByID(ctx context.Context, id int64) (Auction, error) {
	row := q.db.QueryRow(ctx, getAuctionByID, id)
	var i Auction
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Category,
		&i.Description,
		&i.CurrentBid,
		&i.StartPrice,
		&i.StartTime,
		&i.EndTime,
		&i.Watchers,
		&i.BidsCount,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const listAuctions = `-- name: ListAuctions :many
SELECT a.id, a.domain, a.category, a.description, a.current_bid, a.start_price, a.start_time, a.end_time, a.watchers, a.bids_count, a.status, a.created_by, a.created_at, a.updated_by, a.updated_at,
       COALESCE(p1.top_four_bids_json, '[]') AS top_four_bids
FROM auctions a
LEFT JOIN LATERAL (
    SELECT json_agg(json_build_object(
        'id', b.id,
        'user_id', b.user_id,
        'auction_id', b.auction_id,
        'user_identifier', b.user_identifier,
        'amount', b.amount,
        'created_at', b.created_at
    ) ORDER BY b.amount DESC) AS top_four_bids_json
    FROM bids b
    WHERE b.auction_id = a.id
    LIMIT 4
) p1 ON true
WHERE (
        COALESCE($1::text, '') = '' 
        OR LOWER(a.domain) LIKE $1
        OR LOWER(a.description) LIKE $1
    )
  AND (
        $2::text IS NULL 
        OR a.category = $2
    )
  AND (
        $3::text IS NULL 
        OR a.status = $3
    )
ORDER BY a.created_at DESC
LIMIT $5 OFFSET $4
`

type ListAuctionsParams struct {
	Search   pgtype.Text `json:"search"`
	Category pgtype.Text `json:"category"`
	Status   pgtype.Text `json:"status"`
	Offset   int32       `json:"offset"`
	Limit    int32       `json:"limit"`
}

type ListAuctionsRow struct {
	ID          int64          `json:"id"`
	Domain      string         `json:"domain"`
	Category    string         `json:"category"`
	Description string         `json:"description"`
	CurrentBid  pgtype.Numeric `json:"current_bid"`
	StartPrice  pgtype.Numeric `json:"start_price"`
	StartTime   time.Time      `json:"start_time"`
	EndTime     time.Time      `json:"end_time"`
	Watchers    int64          `json:"watchers"`
	BidsCount   int64          `json:"bids_count"`
	Status      string         `json:"status"`
	CreatedBy   int64          `json:"created_by"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedBy   int64          `json:"updated_by"`
	UpdatedAt   time.Time      `json:"updated_at"`
	TopFourBids []byte         `json:"top_four_bids"`
}

func (q *Queries) ListAuctions(ctx context.Context, arg ListAuctionsParams) ([]ListAuctionsRow, error) {
	rows, err := q.db.Query(ctx, listAuctions,
		arg.Search,
		arg.Category,
		arg.Status,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAuctionsRow{}
	for rows.Next() {
		var i ListAuctionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.Category,
			&i.Description,
			&i.CurrentBid,
			&i.StartPrice,
			&i.StartTime,
			&i.EndTime,
			&i.Watchers,
			&i.BidsCount,
			&i.Status,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.TopFourBids,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuction = `-- name: UpdateAuction :one
UPDATE auctions
SET domain = COALESCE($1, domain),
    category = COALESCE($2, category),
    description = COALESCE($3, description),
    start_price = COALESCE($4, start_price),
    start_time = COALESCE($5, start_time),
    end_time = COALESCE($6, end_time),
    status = COALESCE($7, status),
    updated_by = $8,
    updated_at = now()
WHERE id = $9
RETURNING id, domain, category, description, current_bid, start_price, start_time, end_time, watchers, bids_count, status, created_by, created_at, updated_by, updated_at
`

type UpdateAuctionParams struct {
	Domain      pgtype.Text        `json:"domain"`
	Category    pgtype.Text        `json:"category"`
	Description pgtype.Text        `json:"description"`
	StartPrice  pgtype.Numeric     `json:"start_price"`
	StartTime   pgtype.Timestamptz `json:"start_time"`
	EndTime     pgtype.Timestamptz `json:"end_time"`
	Status      pgtype.Text        `json:"status"`
	UpdatedBy   int64              `json:"updated_by"`
	ID          int64              `json:"id"`
}

func (q *Queries) UpdateAuction(ctx context.Context, arg UpdateAuctionParams) (Auction, error) {
	row := q.db.QueryRow(ctx, updateAuction,
		arg.Domain,
		arg.Category,
		arg.Description,
		arg.StartPrice,
		arg.StartTime,
		arg.EndTime,
		arg.Status,
		arg.UpdatedBy,
		arg.ID,
	)
	var i Auction
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Category,
		&i.Description,
		&i.CurrentBid,
		&i.StartPrice,
		&i.StartTime,
		&i.EndTime,
		&i.Watchers,
		&i.BidsCount,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAuctionStats = `-- name: UpdateAuctionStats :one
UPDATE auctions
SET current_bid = COALESCE($1, current_bid),
    watchers = COALESCE(watchers + $2, watchers),
    bids_count = COALESCE(bids_count + $3, bids_count)
WHERE id = $4
RETURNING id, domain, category, description, current_bid, start_price, start_time, end_time, watchers, bids_count, status, created_by, created_at, updated_by, updated_at
`

type UpdateAuctionStatsParams struct {
	CurrentBid pgtype.Numeric `json:"current_bid"`
	Watchers   pgtype.Int8    `json:"watchers"`
	BidsCount  pgtype.Int8    `json:"bids_count"`
	ID         int64          `json:"id"`
}

func (q *Queries) UpdateAuctionStats(ctx context.Context, arg UpdateAuctionStatsParams) (Auction, error) {
	row := q.db.QueryRow(ctx, updateAuctionStats,
		arg.CurrentBid,
		arg.Watchers,
		arg.BidsCount,
		arg.ID,
	)
	var i Auction
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Category,
		&i.Description,
		&i.CurrentBid,
		&i.StartPrice,
		&i.StartTime,
		&i.EndTime,
		&i.Watchers,
		&i.BidsCount,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}
