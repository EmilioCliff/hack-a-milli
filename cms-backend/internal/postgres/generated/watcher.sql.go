// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: watcher.sql

package generated

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWatcher = `-- name: CreateWatcher :one
INSERT INTO watchers (user_id, auction_id)
VALUES ($1, $2)
RETURNING id, user_id, auction_id, status, created_at
`

type CreateWatcherParams struct {
	UserID    int64 `json:"user_id"`
	AuctionID int64 `json:"auction_id"`
}

func (q *Queries) CreateWatcher(ctx context.Context, arg CreateWatcherParams) (Watcher, error) {
	row := q.db.QueryRow(ctx, createWatcher, arg.UserID, arg.AuctionID)
	var i Watcher
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AuctionID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getActiveDeviceTokenByActiveAuctionWatchers = `-- name: GetActiveDeviceTokenByActiveAuctionWatchers :many
SELECT dt.device_token
FROM watchers w
JOIN device_tokens dt ON w.user_id = dt.user_id
WHERE w.auction_id = $1 AND w.status = 'active' AND dt.active = true
`

func (q *Queries) GetActiveDeviceTokenByActiveAuctionWatchers(ctx context.Context, auctionID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getActiveDeviceTokenByActiveAuctionWatchers, auctionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var device_token string
		if err := rows.Scan(&device_token); err != nil {
			return nil, err
		}
		items = append(items, device_token)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWatchersByAuctionID = `-- name: GetWatchersByAuctionID :many
SELECT w.id, w.user_id, w.auction_id, w.status, w.created_at,
    dt.device_token,
    dt.platform
FROM watchers w
LEFT JOIN device_tokens dt ON w.user_id = dt.user_id
WHERE w.auction_id = $1 AND w.status = 'active' AND dt.active = true
ORDER BY w.created_at DESC
`

type GetWatchersByAuctionIDRow struct {
	ID          int64       `json:"id"`
	UserID      int64       `json:"user_id"`
	AuctionID   int64       `json:"auction_id"`
	Status      string      `json:"status"`
	CreatedAt   time.Time   `json:"created_at"`
	DeviceToken pgtype.Text `json:"device_token"`
	Platform    pgtype.Text `json:"platform"`
}

func (q *Queries) GetWatchersByAuctionID(ctx context.Context, auctionID int64) ([]GetWatchersByAuctionIDRow, error) {
	rows, err := q.db.Query(ctx, getWatchersByAuctionID, auctionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWatchersByAuctionIDRow{}
	for rows.Next() {
		var i GetWatchersByAuctionIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AuctionID,
			&i.Status,
			&i.CreatedAt,
			&i.DeviceToken,
			&i.Platform,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isUserWatchingAuction = `-- name: IsUserWatchingAuction :one
SELECT EXISTS (SELECT 1 FROM watchers
WHERE user_id = $1 AND auction_id = $2) AS is_watching
`

type IsUserWatchingAuctionParams struct {
	UserID    int64 `json:"user_id"`
	AuctionID int64 `json:"auction_id"`
}

func (q *Queries) IsUserWatchingAuction(ctx context.Context, arg IsUserWatchingAuctionParams) (bool, error) {
	row := q.db.QueryRow(ctx, isUserWatchingAuction, arg.UserID, arg.AuctionID)
	var is_watching bool
	err := row.Scan(&is_watching)
	return is_watching, err
}

const updateWatcherStatus = `-- name: UpdateWatcherStatus :one
UPDATE watchers
SET status = $3
WHERE user_id = $1 AND auction_id = $2
RETURNING id, user_id, auction_id, status, created_at
`

type UpdateWatcherStatusParams struct {
	UserID    int64  `json:"user_id"`
	AuctionID int64  `json:"auction_id"`
	Status    string `json:"status"`
}

func (q *Queries) UpdateWatcherStatus(ctx context.Context, arg UpdateWatcherStatusParams) (Watcher, error) {
	row := q.db.QueryRow(ctx, updateWatcherStatus, arg.UserID, arg.AuctionID, arg.Status)
	var i Watcher
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AuctionID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
