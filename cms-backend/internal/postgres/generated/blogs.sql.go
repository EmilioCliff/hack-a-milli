// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: blogs.sql

package generated

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const countBlogs = `-- name: CountBlogs :one
SELECT COUNT(*) AS total_blogs
FROM blogs 
WHERE
    deleted_at IS NULL
    AND (
        $1::bigint IS NULL 
        OR b.author = $1
    ) 
    AND (
        COALESCE($2::text, '') = '' 
        OR LOWER(b.title) LIKE $2
        OR LOWER(b.topic) LIKE $2
    )
    AND (
        $3::boolean IS NULL 
        OR b.published = $3
    )
`

type CountBlogsParams struct {
	Author    pgtype.Int8 `json:"author"`
	Search    pgtype.Text `json:"search"`
	Published pgtype.Bool `json:"published"`
}

func (q *Queries) CountBlogs(ctx context.Context, arg CountBlogsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countBlogs, arg.Author, arg.Search, arg.Published)
	var total_blogs int64
	err := row.Scan(&total_blogs)
	return total_blogs, err
}

const createBlog = `-- name: CreateBlog :one
INSERT INTO blogs (title, author, cover_img, topic, description, content, min_read, updated_by, created_by)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type CreateBlogParams struct {
	Title       string `json:"title"`
	Author      int64  `json:"author"`
	CoverImg    string `json:"cover_img"`
	Topic       string `json:"topic"`
	Description string `json:"description"`
	Content     string `json:"content"`
	MinRead     int32  `json:"min_read"`
	UpdatedBy   int64  `json:"updated_by"`
	CreatedBy   int64  `json:"created_by"`
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (int64, error) {
	row := q.db.QueryRow(ctx, createBlog,
		arg.Title,
		arg.Author,
		arg.CoverImg,
		arg.Topic,
		arg.Description,
		arg.Content,
		arg.MinRead,
		arg.UpdatedBy,
		arg.CreatedBy,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteBlog = `-- name: DeleteBlog :exec
UPDATE blogs
SET deleted_at = NOW(),
    deleted_by = $1
WHERE id = $2
`

type DeleteBlogParams struct {
	DeletedBy pgtype.Int8 `json:"deleted_by"`
	ID        int64       `json:"id"`
}

func (q *Queries) DeleteBlog(ctx context.Context, arg DeleteBlogParams) error {
	_, err := q.db.Exec(ctx, deleteBlog, arg.DeletedBy, arg.ID)
	return err
}

const getBlog = `-- name: GetBlog :one
SELECT b.id, b.title, b.author, b.cover_img, b.topic, b.description, b.content, b.views, b.min_read, b.published, b.published_at, b.updated_by, b.created_by, b.deleted_by, b.deleted_at, b.updated_at, b.created_at,
       COALESCE(p1.author_json, '{}') AS author_details
FROM blogs b
LEFT JOIN LATERAL (
    SELECT json_build_object(
        'id', u.id,
        'email', u.email,
        'full_name', u.full_name,
        'role', u.role
    ) AS author_json
    FROM users u
    WHERE u.id = b.author
) p1 ON true
WHERE b.id = $1
`

type GetBlogRow struct {
	ID            int64              `json:"id"`
	Title         string             `json:"title"`
	Author        int64              `json:"author"`
	CoverImg      string             `json:"cover_img"`
	Topic         string             `json:"topic"`
	Description   string             `json:"description"`
	Content       string             `json:"content"`
	Views         int32              `json:"views"`
	MinRead       int32              `json:"min_read"`
	Published     bool               `json:"published"`
	PublishedAt   pgtype.Timestamptz `json:"published_at"`
	UpdatedBy     int64              `json:"updated_by"`
	CreatedBy     int64              `json:"created_by"`
	DeletedBy     pgtype.Int8        `json:"deleted_by"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	UpdatedAt     time.Time          `json:"updated_at"`
	CreatedAt     time.Time          `json:"created_at"`
	AuthorDetails []byte             `json:"author_details"`
}

func (q *Queries) GetBlog(ctx context.Context, id int64) (GetBlogRow, error) {
	row := q.db.QueryRow(ctx, getBlog, id)
	var i GetBlogRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.CoverImg,
		&i.Topic,
		&i.Description,
		&i.Content,
		&i.Views,
		&i.MinRead,
		&i.Published,
		&i.PublishedAt,
		&i.UpdatedBy,
		&i.CreatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.AuthorDetails,
	)
	return i, err
}

const listBlogs = `-- name: ListBlogs :many
SELECT b.id, b.title, b.author, b.cover_img, b.topic, b.description, b.content, b.views, b.min_read, b.published, b.published_at, b.updated_by, b.created_by, b.deleted_by, b.deleted_at, b.updated_at, b.created_at,
       COALESCE(p1.author_json, '{}') AS author_details
FROM blogs b
LEFT JOIN LATERAL (
    SELECT json_build_object(
        'id', u.id,
        'email', u.email,
        'full_name', u.full_name,
        'role', u.role
    ) AS author_json
    FROM users u
    WHERE u.id = b.author
) p1 ON true
WHERE
    deleted_at IS NULL
    AND (
        $1::bigint IS NULL 
        OR b.author = $1
    ) 
    AND (
        COALESCE($2::text, '') = '' 
        OR LOWER(b.title) LIKE $2
        OR LOWER(b.topic) LIKE $2
    )
    AND (
        $3::boolean IS NULL 
        OR b.published = $3
    )
ORDER BY b.created_at DESC
LIMIT $5 OFFSET $4
`

type ListBlogsParams struct {
	Author    pgtype.Int8 `json:"author"`
	Search    pgtype.Text `json:"search"`
	Published pgtype.Bool `json:"published"`
	Offset    int32       `json:"offset"`
	Limit     int32       `json:"limit"`
}

type ListBlogsRow struct {
	ID            int64              `json:"id"`
	Title         string             `json:"title"`
	Author        int64              `json:"author"`
	CoverImg      string             `json:"cover_img"`
	Topic         string             `json:"topic"`
	Description   string             `json:"description"`
	Content       string             `json:"content"`
	Views         int32              `json:"views"`
	MinRead       int32              `json:"min_read"`
	Published     bool               `json:"published"`
	PublishedAt   pgtype.Timestamptz `json:"published_at"`
	UpdatedBy     int64              `json:"updated_by"`
	CreatedBy     int64              `json:"created_by"`
	DeletedBy     pgtype.Int8        `json:"deleted_by"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	UpdatedAt     time.Time          `json:"updated_at"`
	CreatedAt     time.Time          `json:"created_at"`
	AuthorDetails []byte             `json:"author_details"`
}

func (q *Queries) ListBlogs(ctx context.Context, arg ListBlogsParams) ([]ListBlogsRow, error) {
	rows, err := q.db.Query(ctx, listBlogs,
		arg.Author,
		arg.Search,
		arg.Published,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListBlogsRow{}
	for rows.Next() {
		var i ListBlogsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.CoverImg,
			&i.Topic,
			&i.Description,
			&i.Content,
			&i.Views,
			&i.MinRead,
			&i.Published,
			&i.PublishedAt,
			&i.UpdatedBy,
			&i.CreatedBy,
			&i.DeletedBy,
			&i.DeletedAt,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.AuthorDetails,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishBlog = `-- name: PublishBlog :exec
UPDATE blogs
SET published = TRUE,
    published_at = NOW(),
    updated_by = $1,
    updated_at = NOW()
WHERE id = $2
`

type PublishBlogParams struct {
	UpdatedBy int64 `json:"updated_by"`
	ID        int64 `json:"id"`
}

func (q *Queries) PublishBlog(ctx context.Context, arg PublishBlogParams) error {
	_, err := q.db.Exec(ctx, publishBlog, arg.UpdatedBy, arg.ID)
	return err
}

const updateBlog = `-- name: UpdateBlog :exec
UPDATE blogs
SET title = COALESCE($1, title),
    cover_img = COALESCE($2, cover_img),
    topic = COALESCE($3, topic),
    description = COALESCE($4, description),
    content = COALESCE($5, content),
    min_read = COALESCE($6, min_read),
    views = COALESCE($7, views),
    updated_by = $8,
    updated_at = NOW()
WHERE id = $9
`

type UpdateBlogParams struct {
	Title       pgtype.Text `json:"title"`
	CoverImg    pgtype.Text `json:"cover_img"`
	Topic       pgtype.Text `json:"topic"`
	Description pgtype.Text `json:"description"`
	Content     pgtype.Text `json:"content"`
	MinRead     pgtype.Int4 `json:"min_read"`
	Views       pgtype.Int4 `json:"views"`
	UpdatedBy   int64       `json:"updated_by"`
	ID          int64       `json:"id"`
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) error {
	_, err := q.db.Exec(ctx, updateBlog,
		arg.Title,
		arg.CoverImg,
		arg.Topic,
		arg.Description,
		arg.Content,
		arg.MinRead,
		arg.Views,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
