// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: job_applications.sql

package generated

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const countJobApplications = `-- name: CountJobApplications :one
SELECT COUNT(*) FROM job_applications
WHERE 
    (
        COALESCE($1::text, '') = ''
        OR LOWER(full_name) LIKE $1
        OR LOWER(email) LIKE $1
        OR LOWER(phone_number) LIKE $1
    )
    AND (
        $2::text IS NULL
        OR status = $2
    )
    AND (
        COALESCE($3::bigint, 0) = 0
        OR job_id = $3
    )
`

type CountJobApplicationsParams struct {
	Search pgtype.Text `json:"search"`
	Status pgtype.Text `json:"status"`
	JobID  pgtype.Int8 `json:"job_id"`
}

func (q *Queries) CountJobApplications(ctx context.Context, arg CountJobApplicationsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countJobApplications, arg.Search, arg.Status, arg.JobID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createJobApplication = `-- name: CreateJobApplication :one
INSERT INTO job_applications (job_id, full_name, email, phone_number, cover_letter, resume_url, submitted_at)
VALUES ($1, $2, $3, $4, $5, $6, NOW())
RETURNING id
`

type CreateJobApplicationParams struct {
	JobID       int64  `json:"job_id"`
	FullName    string `json:"full_name"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phone_number"`
	CoverLetter string `json:"cover_letter"`
	ResumeUrl   string `json:"resume_url"`
}

func (q *Queries) CreateJobApplication(ctx context.Context, arg CreateJobApplicationParams) (int64, error) {
	row := q.db.QueryRow(ctx, createJobApplication,
		arg.JobID,
		arg.FullName,
		arg.Email,
		arg.PhoneNumber,
		arg.CoverLetter,
		arg.ResumeUrl,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getJobApplication = `-- name: GetJobApplication :one
SELECT 
    ja.id, ja.job_id, ja.full_name, ja.email, ja.phone_number, ja.cover_letter, ja.resume_url, ja.status, ja.comment, ja.submitted_at, ja.updated_by, ja.updated_at, ja.created_at,
    COALESCE(jp.job_json, '{}') AS job
FROM job_applications ja
LEFT JOIN LATERAL (
    SELECT json_build_object(
        'id', j.id,
        'title', j.title,
        'department_id', j.department_id,
        'location', j.location,
        'employment_type', j.employment_type,
        'content', j.content,
        'start_date', j.start_date,
        'end_date', j.end_date
    ) AS job_json
    FROM job_postings j
    WHERE j.id = ja.job_id
) jp ON true
WHERE ja.id = $1
`

type GetJobApplicationRow struct {
	ID          int64       `json:"id"`
	JobID       int64       `json:"job_id"`
	FullName    string      `json:"full_name"`
	Email       string      `json:"email"`
	PhoneNumber string      `json:"phone_number"`
	CoverLetter string      `json:"cover_letter"`
	ResumeUrl   string      `json:"resume_url"`
	Status      string      `json:"status"`
	Comment     pgtype.Text `json:"comment"`
	SubmittedAt time.Time   `json:"submitted_at"`
	UpdatedBy   pgtype.Int8 `json:"updated_by"`
	UpdatedAt   time.Time   `json:"updated_at"`
	CreatedAt   time.Time   `json:"created_at"`
	Job         []byte      `json:"job"`
}

func (q *Queries) GetJobApplication(ctx context.Context, id int64) (GetJobApplicationRow, error) {
	row := q.db.QueryRow(ctx, getJobApplication, id)
	var i GetJobApplicationRow
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.CoverLetter,
		&i.ResumeUrl,
		&i.Status,
		&i.Comment,
		&i.SubmittedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Job,
	)
	return i, err
}

const getJobApplicationsByJobID = `-- name: GetJobApplicationsByJobID :many
SELECT id, job_id, full_name, email, phone_number, cover_letter, resume_url, status, comment, submitted_at, updated_by, updated_at, created_at FROM job_applications
WHERE job_id = $1
ORDER BY submitted_at DESC
LIMIT $3 OFFSET $2
`

type GetJobApplicationsByJobIDParams struct {
	JobID  int64 `json:"job_id"`
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetJobApplicationsByJobID(ctx context.Context, arg GetJobApplicationsByJobIDParams) ([]JobApplication, error) {
	rows, err := q.db.Query(ctx, getJobApplicationsByJobID, arg.JobID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobApplication{}
	for rows.Next() {
		var i JobApplication
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.FullName,
			&i.Email,
			&i.PhoneNumber,
			&i.CoverLetter,
			&i.ResumeUrl,
			&i.Status,
			&i.Comment,
			&i.SubmittedAt,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobApplications = `-- name: ListJobApplications :many
SELECT id, job_id, full_name, email, phone_number, cover_letter, resume_url, status, comment, submitted_at, updated_by, updated_at, created_at FROM job_applications
WHERE 
    (
        COALESCE($1::text, '') = ''
        OR LOWER(full_name) LIKE $1
        OR LOWER(email) LIKE $1
        OR LOWER(phone_number) LIKE $1
    )
    AND (
        $2::text IS NULL
        OR status = $2
    )
    AND (
        COALESCE($3::bigint, 0) = 0
        OR job_id = $3
    )
ORDER BY submitted_at DESC
LIMIT $5 OFFSET $4
`

type ListJobApplicationsParams struct {
	Search pgtype.Text `json:"search"`
	Status pgtype.Text `json:"status"`
	JobID  pgtype.Int8 `json:"job_id"`
	Offset int32       `json:"offset"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) ListJobApplications(ctx context.Context, arg ListJobApplicationsParams) ([]JobApplication, error) {
	rows, err := q.db.Query(ctx, listJobApplications,
		arg.Search,
		arg.Status,
		arg.JobID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobApplication{}
	for rows.Next() {
		var i JobApplication
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.FullName,
			&i.Email,
			&i.PhoneNumber,
			&i.CoverLetter,
			&i.ResumeUrl,
			&i.Status,
			&i.Comment,
			&i.SubmittedAt,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobApplication = `-- name: UpdateJobApplication :one
UPDATE job_applications
SET status = COALESCE($1, status),
    comment = COALESCE($2, comment),
    updated_by = $3,
    updated_at = NOW()
WHERE id = $4
RETURNING id, job_id, full_name, email, phone_number, cover_letter, resume_url, status, comment, submitted_at, updated_by, updated_at, created_at
`

type UpdateJobApplicationParams struct {
	Status    pgtype.Text `json:"status"`
	Comment   pgtype.Text `json:"comment"`
	UpdatedBy pgtype.Int8 `json:"updated_by"`
	ID        int64       `json:"id"`
}

func (q *Queries) UpdateJobApplication(ctx context.Context, arg UpdateJobApplicationParams) (JobApplication, error) {
	row := q.db.QueryRow(ctx, updateJobApplication,
		arg.Status,
		arg.Comment,
		arg.UpdatedBy,
		arg.ID,
	)
	var i JobApplication
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.CoverLetter,
		&i.ResumeUrl,
		&i.Status,
		&i.Comment,
		&i.SubmittedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
