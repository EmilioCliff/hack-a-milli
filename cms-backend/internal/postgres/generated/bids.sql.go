// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bids.sql

package generated

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserBidExists = `-- name: CheckUserBidExists :one
SELECT EXISTS (SELECT 1 FROM bids
WHERE user_id = $1 AND auction_id = $2)
`

type CheckUserBidExistsParams struct {
	UserID    int64 `json:"user_id"`
	AuctionID int64 `json:"auction_id"`
}

func (q *Queries) CheckUserBidExists(ctx context.Context, arg CheckUserBidExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserBidExists, arg.UserID, arg.AuctionID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countBidsByAuctionID = `-- name: CountBidsByAuctionID :one
SELECT COUNT(*) AS total_bids
FROM bids
WHERE auction_id = $1
`

func (q *Queries) CountBidsByAuctionID(ctx context.Context, auctionID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countBidsByAuctionID, auctionID)
	var total_bids int64
	err := row.Scan(&total_bids)
	return total_bids, err
}

const createBid = `-- name: CreateBid :exec
INSERT INTO bids (user_id, auction_id, user_identifier, amount)
VALUES ($1, $2, $3, $4)
`

type CreateBidParams struct {
	UserID         int64          `json:"user_id"`
	AuctionID      int64          `json:"auction_id"`
	UserIdentifier string         `json:"user_identifier"`
	Amount         pgtype.Numeric `json:"amount"`
}

func (q *Queries) CreateBid(ctx context.Context, arg CreateBidParams) error {
	_, err := q.db.Exec(ctx, createBid,
		arg.UserID,
		arg.AuctionID,
		arg.UserIdentifier,
		arg.Amount,
	)
	return err
}

const getBidsByAuctionID = `-- name: GetBidsByAuctionID :many
SELECT id, user_id, auction_id, user_identifier, amount, created_at FROM bids
WHERE auction_id = $1
ORDER BY created_at DESC
LIMIT 4
`

func (q *Queries) GetBidsByAuctionID(ctx context.Context, auctionID int64) ([]Bid, error) {
	rows, err := q.db.Query(ctx, getBidsByAuctionID, auctionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bid{}
	for rows.Next() {
		var i Bid
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AuctionID,
			&i.UserIdentifier,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBidsByAuctionIDFullData = `-- name: GetBidsByAuctionIDFullData :many
SELECT b.id, b.user_id, b.auction_id, b.user_identifier, b.amount, b.created_at, 
    u.id AS user_id,
    u.full_name AS full_name, 
    u.email AS email
FROM bids b
JOIN users u ON b.user_id = u.id
WHERE b.auction_id = $1
ORDER BY b.created_at DESC
LIMIT $2 OFFSET $3
`

type GetBidsByAuctionIDFullDataParams struct {
	AuctionID int64 `json:"auction_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type GetBidsByAuctionIDFullDataRow struct {
	ID             int64          `json:"id"`
	UserID         int64          `json:"user_id"`
	AuctionID      int64          `json:"auction_id"`
	UserIdentifier string         `json:"user_identifier"`
	Amount         pgtype.Numeric `json:"amount"`
	CreatedAt      time.Time      `json:"created_at"`
	UserID_2       int64          `json:"user_id_2"`
	FullName       string         `json:"full_name"`
	Email          string         `json:"email"`
}

func (q *Queries) GetBidsByAuctionIDFullData(ctx context.Context, arg GetBidsByAuctionIDFullDataParams) ([]GetBidsByAuctionIDFullDataRow, error) {
	rows, err := q.db.Query(ctx, getBidsByAuctionIDFullData, arg.AuctionID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBidsByAuctionIDFullDataRow{}
	for rows.Next() {
		var i GetBidsByAuctionIDFullDataRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AuctionID,
			&i.UserIdentifier,
			&i.Amount,
			&i.CreatedAt,
			&i.UserID_2,
			&i.FullName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBid = `-- name: UpdateBid :exec

UPDATE bids
SET amount = $3,
    created_at = now()
WHERE user_id = $1 AND auction_id = $2
`

type UpdateBidParams struct {
	UserID    int64          `json:"user_id"`
	AuctionID int64          `json:"auction_id"`
	Amount    pgtype.Numeric `json:"amount"`
}

// get latest 4 bids
func (q *Queries) UpdateBid(ctx context.Context, arg UpdateBidParams) error {
	_, err := q.db.Exec(ctx, updateBid, arg.UserID, arg.AuctionID, arg.Amount)
	return err
}
