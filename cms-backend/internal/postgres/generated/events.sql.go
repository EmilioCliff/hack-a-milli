// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: events.sql

package generated

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const addEventRegisteredAttedee = `-- name: AddEventRegisteredAttedee :exec
UPDATE events
SET registered_attendees = registered_attendees + 1
WHERE id = $1
`

func (q *Queries) AddEventRegisteredAttedee(ctx context.Context, eventID int64) error {
	_, err := q.db.Exec(ctx, addEventRegisteredAttedee, eventID)
	return err
}

const checkEventIsPublishedAndUpcomingOrLive = `-- name: CheckEventIsPublishedAndUpcomingOrLive :one
SELECT EXISTS(
    SELECT 1 FROM events
    WHERE id = $1
    AND published = TRUE
    AND deleted_at IS NULL
    AND status IN ('upcoming', 'live')
) AS is_published_and_upcoming_or_live
`

func (q *Queries) CheckEventIsPublishedAndUpcomingOrLive(ctx context.Context, eventID int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkEventIsPublishedAndUpcomingOrLive, eventID)
	var is_published_and_upcoming_or_live bool
	err := row.Scan(&is_published_and_upcoming_or_live)
	return is_published_and_upcoming_or_live, err
}

const countEvents = `-- name: CountEvents :one
SELECT COUNT(*) FROM events
WHERE 
    deleted_at IS NULL
    AND (
        COALESCE($1::text, '') = '' 
        OR LOWER(title) LIKE $1
        OR LOWER(topic) LIKE $1
    )
    AND (
        $2::text IS NULL 
        OR status = $2
    )
    AND (
        $3::boolean IS NULL 
        OR published = $3
    )
    AND (
        $4::text[] IS NULL 
        OR tags && $4::text[]
    )
    AND (
        $5::timestamptz IS NULL 
        OR start_time >= $5
    )
    AND (
        $6::timestamptz IS NULL 
        OR end_time <= $6
    )
`

type CountEventsParams struct {
	Search    pgtype.Text        `json:"search"`
	Status    pgtype.Text        `json:"status"`
	Published pgtype.Bool        `json:"published"`
	Tags      []string           `json:"tags"`
	StartTime pgtype.Timestamptz `json:"start_time"`
	EndTime   pgtype.Timestamptz `json:"end_time"`
}

func (q *Queries) CountEvents(ctx context.Context, arg CountEventsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countEvents,
		arg.Search,
		arg.Status,
		arg.Published,
		arg.Tags,
		arg.StartTime,
		arg.EndTime,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    title, topic, content, 
    cover_img, start_time, end_time, 
    status, venue, price, 
    agenda, tags, organizers, 
    partners, speakers, max_attendees, 
    updated_by, created_by
)
VALUES (
    $1, $2, $3, 
    $4, $5, $6, 
    $7, COALESCE($8, '{}'::jsonb), COALESCE($9, 'free'), 
    COALESCE($10, '{}'::jsonb), COALESCE($11, '{}'::text[]), COALESCE($12, '{}'::jsonb), 
    COALESCE($13, '{}'::jsonb), COALESCE($14, '{}'::jsonb), COALESCE($15, 500), 
    $16, $17
)
RETURNING id
`

type CreateEventParams struct {
	Title        string      `json:"title"`
	Topic        string      `json:"topic"`
	Content      string      `json:"content"`
	CoverImg     string      `json:"cover_img"`
	StartTime    time.Time   `json:"start_time"`
	EndTime      time.Time   `json:"end_time"`
	Status       string      `json:"status"`
	Venue        interface{} `json:"venue"`
	Price        interface{} `json:"price"`
	Agenda       interface{} `json:"agenda"`
	Tags         interface{} `json:"tags"`
	Organizers   interface{} `json:"organizers"`
	Partners     interface{} `json:"partners"`
	Speakers     interface{} `json:"speakers"`
	MaxAttendees interface{} `json:"max_attendees"`
	UpdatedBy    int64       `json:"updated_by"`
	CreatedBy    int64       `json:"created_by"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (int64, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Title,
		arg.Topic,
		arg.Content,
		arg.CoverImg,
		arg.StartTime,
		arg.EndTime,
		arg.Status,
		arg.Venue,
		arg.Price,
		arg.Agenda,
		arg.Tags,
		arg.Organizers,
		arg.Partners,
		arg.Speakers,
		arg.MaxAttendees,
		arg.UpdatedBy,
		arg.CreatedBy,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteEvent = `-- name: DeleteEvent :exec
UPDATE events
SET deleted_at = NOW(),
    deleted_by = $1
WHERE id = $2
`

type DeleteEventParams struct {
	DeletedBy pgtype.Int8 `json:"deleted_by"`
	ID        int64       `json:"id"`
}

func (q *Queries) DeleteEvent(ctx context.Context, arg DeleteEventParams) error {
	_, err := q.db.Exec(ctx, deleteEvent, arg.DeletedBy, arg.ID)
	return err
}

const eventExists = `-- name: EventExists :one
SELECT EXISTS(SELECT 1 FROM events WHERE id = $1) AS exists
`

func (q *Queries) EventExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, eventExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getEvent = `-- name: GetEvent :one
SELECT id, title, topic, content, cover_img, start_time, end_time, status, venue, price, agenda, tags, organizers, partners, speakers, max_attendees, registered_attendees, published, published_at, updated_by, created_by, deleted_by, deleted_at, updated_at, created_at FROM events
WHERE id = $1
`

func (q *Queries) GetEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRow(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Content,
		&i.CoverImg,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.Venue,
		&i.Price,
		&i.Agenda,
		&i.Tags,
		&i.Organizers,
		&i.Partners,
		&i.Speakers,
		&i.MaxAttendees,
		&i.RegisteredAttendees,
		&i.Published,
		&i.PublishedAt,
		&i.UpdatedBy,
		&i.CreatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPublishedEvent = `-- name: GetPublishedEvent :one
SELECT id, title, topic, content, cover_img, start_time, end_time, status, venue, price, agenda, tags, organizers, partners, speakers, max_attendees, registered_attendees, published, published_at, updated_by, created_by, deleted_by, deleted_at, updated_at, created_at FROM events
WHERE id = $1 AND published = TRUE AND deleted_at IS NULL
`

func (q *Queries) GetPublishedEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRow(ctx, getPublishedEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Content,
		&i.CoverImg,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.Venue,
		&i.Price,
		&i.Agenda,
		&i.Tags,
		&i.Organizers,
		&i.Partners,
		&i.Speakers,
		&i.MaxAttendees,
		&i.RegisteredAttendees,
		&i.Published,
		&i.PublishedAt,
		&i.UpdatedBy,
		&i.CreatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, title, topic, content, cover_img, start_time, end_time, status, venue, price, agenda, tags, organizers, partners, speakers, max_attendees, registered_attendees, published, published_at, updated_by, created_by, deleted_by, deleted_at, updated_at, created_at FROM events
WHERE 
    deleted_at IS NULL
    AND (
        COALESCE($1::text, '') = '' 
        OR LOWER(title) LIKE $1
        OR LOWER(topic) LIKE $1
    )
    AND (
        $2::text IS NULL 
        OR status = $2
    )
    AND (
        $3::boolean IS NULL 
        OR published = $3
    )
    AND (
        $4::text[] IS NULL 
        OR tags && $4::text[]
    )
    AND (
        $5::timestamptz IS NULL 
        OR start_time >= $5
    )
    AND (
        $6::timestamptz IS NULL 
        OR end_time <= $6
    )
ORDER BY created_at DESC
LIMIT $8 OFFSET $7
`

type ListEventsParams struct {
	Search    pgtype.Text        `json:"search"`
	Status    pgtype.Text        `json:"status"`
	Published pgtype.Bool        `json:"published"`
	Tags      []string           `json:"tags"`
	StartTime pgtype.Timestamptz `json:"start_time"`
	EndTime   pgtype.Timestamptz `json:"end_time"`
	Offset    int32              `json:"offset"`
	Limit     int32              `json:"limit"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEvents,
		arg.Search,
		arg.Status,
		arg.Published,
		arg.Tags,
		arg.StartTime,
		arg.EndTime,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Topic,
			&i.Content,
			&i.CoverImg,
			&i.StartTime,
			&i.EndTime,
			&i.Status,
			&i.Venue,
			&i.Price,
			&i.Agenda,
			&i.Tags,
			&i.Organizers,
			&i.Partners,
			&i.Speakers,
			&i.MaxAttendees,
			&i.RegisteredAttendees,
			&i.Published,
			&i.PublishedAt,
			&i.UpdatedBy,
			&i.CreatedBy,
			&i.DeletedBy,
			&i.DeletedAt,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishEvent = `-- name: PublishEvent :exec
UPDATE events
SET published = TRUE,
    published_at = NOW(),
    updated_by = $1,
    updated_at = NOW()
WHERE id = $2
`

type PublishEventParams struct {
	UpdatedBy int64 `json:"updated_by"`
	ID        int64 `json:"id"`
}

func (q *Queries) PublishEvent(ctx context.Context, arg PublishEventParams) error {
	_, err := q.db.Exec(ctx, publishEvent, arg.UpdatedBy, arg.ID)
	return err
}

const updateEvent = `-- name: UpdateEvent :exec
UPDATE events
SET title = COALESCE($1, title),
    topic = COALESCE($2, topic),
    content = COALESCE($3, content),
    cover_img = COALESCE($4, cover_img),
    start_time = COALESCE($5, start_time),
    end_time = COALESCE($6, end_time),
    status = COALESCE($7, status),
    venue = COALESCE($8, venue),
    price = COALESCE($9, price),
    agenda = COALESCE($10, agenda),
    tags = COALESCE($11, tags),
    organizers = COALESCE($12, organizers),
    partners = COALESCE($13, partners),
    speakers = COALESCE($14, speakers),
    max_attendees = COALESCE($15, max_attendees),
    registered_attendees = COALESCE($16, registered_attendees),
    updated_by = $17,
    updated_at = NOW()
WHERE id = $18
`

type UpdateEventParams struct {
	Title               pgtype.Text        `json:"title"`
	Topic               pgtype.Text        `json:"topic"`
	Content             pgtype.Text        `json:"content"`
	CoverImg            pgtype.Text        `json:"cover_img"`
	StartTime           pgtype.Timestamptz `json:"start_time"`
	EndTime             pgtype.Timestamptz `json:"end_time"`
	Status              pgtype.Text        `json:"status"`
	Venue               []byte             `json:"venue"`
	Price               pgtype.Text        `json:"price"`
	Agenda              []byte             `json:"agenda"`
	Tags                []string           `json:"tags"`
	Organizers          []byte             `json:"organizers"`
	Partners            []byte             `json:"partners"`
	Speakers            []byte             `json:"speakers"`
	MaxAttendees        pgtype.Int4        `json:"max_attendees"`
	RegisteredAttendees pgtype.Int4        `json:"registered_attendees"`
	UpdatedBy           int64              `json:"updated_by"`
	ID                  int64              `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.Exec(ctx, updateEvent,
		arg.Title,
		arg.Topic,
		arg.Content,
		arg.CoverImg,
		arg.StartTime,
		arg.EndTime,
		arg.Status,
		arg.Venue,
		arg.Price,
		arg.Agenda,
		arg.Tags,
		arg.Organizers,
		arg.Partners,
		arg.Speakers,
		arg.MaxAttendees,
		arg.RegisteredAttendees,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
