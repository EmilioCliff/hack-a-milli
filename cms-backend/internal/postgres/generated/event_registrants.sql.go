// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: event_registrants.sql

package generated

import (
	"context"
)

const createEventRegistrant = `-- name: CreateEventRegistrant :one
INSERT INTO event_registrants (event_id, name, email)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateEventRegistrantParams struct {
	EventID int64  `json:"event_id"`
	Name    string `json:"name"`
	Email   string `json:"email"`
}

func (q *Queries) CreateEventRegistrant(ctx context.Context, arg CreateEventRegistrantParams) (int64, error) {
	row := q.db.QueryRow(ctx, createEventRegistrant, arg.EventID, arg.Name, arg.Email)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listEventRegistrants = `-- name: ListEventRegistrants :many
SELECT id, event_id, name, email, registered_at FROM event_registrants
WHERE event_id = $1
ORDER BY registered_at DESC
LIMIT $3 OFFSET $2
`

type ListEventRegistrantsParams struct {
	EventID int64 `json:"event_id"`
	Offset  int32 `json:"offset"`
	Limit   int32 `json:"limit"`
}

func (q *Queries) ListEventRegistrants(ctx context.Context, arg ListEventRegistrantsParams) ([]EventRegistrant, error) {
	rows, err := q.db.Query(ctx, listEventRegistrants, arg.EventID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventRegistrant{}
	for rows.Next() {
		var i EventRegistrant
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Name,
			&i.Email,
			&i.RegisteredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
