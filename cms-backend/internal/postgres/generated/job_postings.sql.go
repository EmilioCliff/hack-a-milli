// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: job_postings.sql

package generated

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const changeVisibilityJobPosting = `-- name: ChangeVisibilityJobPosting :one
UPDATE job_postings
SET show_case = $1,
    updated_by = $2,
    updated_at = NOW()
WHERE id = $3
RETURNING id, title, department_id, location, employment_type, content, salary_range, start_date, end_date, show_case, published, published_at, updated_by, created_by, deleted_by, deleted_at, updated_at, created_at
`

type ChangeVisibilityJobPostingParams struct {
	ShowCase  bool  `json:"show_case"`
	UpdatedBy int64 `json:"updated_by"`
	ID        int64 `json:"id"`
}

func (q *Queries) ChangeVisibilityJobPosting(ctx context.Context, arg ChangeVisibilityJobPostingParams) (JobPosting, error) {
	row := q.db.QueryRow(ctx, changeVisibilityJobPosting, arg.ShowCase, arg.UpdatedBy, arg.ID)
	var i JobPosting
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DepartmentID,
		&i.Location,
		&i.EmploymentType,
		&i.Content,
		&i.SalaryRange,
		&i.StartDate,
		&i.EndDate,
		&i.ShowCase,
		&i.Published,
		&i.PublishedAt,
		&i.UpdatedBy,
		&i.CreatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const countJobPostings = `-- name: CountJobPostings :one
SELECT COUNT(*) FROM job_postings
WHERE 
    deleted_at IS NULL
    AND (
        COALESCE($1, '') = '' 
        OR LOWER(title) LIKE $1
        OR LOWER(d.name) LIKE $1
    )
    AND (
        $2::boolean IS NULL 
        OR published = $2
    )
    AND (
        $3::text IS NULL 
        OR employment_type = $3
    )
    AND (
        $4::boolean IS NULL 
        OR show_case = $4
    )
`

type CountJobPostingsParams struct {
	Search         interface{} `json:"search"`
	Published      pgtype.Bool `json:"published"`
	EmploymentType pgtype.Text `json:"employment_type"`
	ShowCase       pgtype.Bool `json:"show_case"`
}

func (q *Queries) CountJobPostings(ctx context.Context, arg CountJobPostingsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countJobPostings,
		arg.Search,
		arg.Published,
		arg.EmploymentType,
		arg.ShowCase,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createJobPosting = `-- name: CreateJobPosting :one
INSERT INTO job_postings (title, department_id, location, employment_type, content, salary_range, start_date, end_date)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id
`

type CreateJobPostingParams struct {
	Title          string      `json:"title"`
	DepartmentID   int64       `json:"department_id"`
	Location       string      `json:"location"`
	EmploymentType string      `json:"employment_type"`
	Content        string      `json:"content"`
	SalaryRange    pgtype.Text `json:"salary_range"`
	StartDate      time.Time   `json:"start_date"`
	EndDate        time.Time   `json:"end_date"`
}

func (q *Queries) CreateJobPosting(ctx context.Context, arg CreateJobPostingParams) (int64, error) {
	row := q.db.QueryRow(ctx, createJobPosting,
		arg.Title,
		arg.DepartmentID,
		arg.Location,
		arg.EmploymentType,
		arg.Content,
		arg.SalaryRange,
		arg.StartDate,
		arg.EndDate,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteJobPosting = `-- name: DeleteJobPosting :exec
UPDATE job_postings
SET deleted_at = NOW(),
    deleted_by = $1
WHERE id = $2
`

type DeleteJobPostingParams struct {
	DeletedBy pgtype.Int8 `json:"deleted_by"`
	ID        int64       `json:"id"`
}

func (q *Queries) DeleteJobPosting(ctx context.Context, arg DeleteJobPostingParams) error {
	_, err := q.db.Exec(ctx, deleteJobPosting, arg.DeletedBy, arg.ID)
	return err
}

const getJobPosting = `-- name: GetJobPosting :one
SELECT 
    jp.id, jp.title, jp.department_id, jp.location, jp.employment_type, jp.content, jp.salary_range, jp.start_date, jp.end_date, jp.show_case, jp.published, jp.published_at, jp.updated_by, jp.created_by, jp.deleted_by, jp.deleted_at, jp.updated_at, jp.created_at,
    d.name
FROM job_postings jp
JOIN departments d ON jp.department_id = d.id
WHERE jp.id = $1
`

type GetJobPostingRow struct {
	ID             int64              `json:"id"`
	Title          string             `json:"title"`
	DepartmentID   int64              `json:"department_id"`
	Location       string             `json:"location"`
	EmploymentType string             `json:"employment_type"`
	Content        string             `json:"content"`
	SalaryRange    pgtype.Text        `json:"salary_range"`
	StartDate      time.Time          `json:"start_date"`
	EndDate        time.Time          `json:"end_date"`
	ShowCase       bool               `json:"show_case"`
	Published      bool               `json:"published"`
	PublishedAt    pgtype.Timestamptz `json:"published_at"`
	UpdatedBy      int64              `json:"updated_by"`
	CreatedBy      int64              `json:"created_by"`
	DeletedBy      pgtype.Int8        `json:"deleted_by"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
	UpdatedAt      time.Time          `json:"updated_at"`
	CreatedAt      time.Time          `json:"created_at"`
	Name           string             `json:"name"`
}

func (q *Queries) GetJobPosting(ctx context.Context, id int64) (GetJobPostingRow, error) {
	row := q.db.QueryRow(ctx, getJobPosting, id)
	var i GetJobPostingRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DepartmentID,
		&i.Location,
		&i.EmploymentType,
		&i.Content,
		&i.SalaryRange,
		&i.StartDate,
		&i.EndDate,
		&i.ShowCase,
		&i.Published,
		&i.PublishedAt,
		&i.UpdatedBy,
		&i.CreatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}

const listJobPostings = `-- name: ListJobPostings :many
SELECT 
    jp.id, jp.title, jp.department_id, jp.location, jp.employment_type, jp.content, jp.salary_range, jp.start_date, jp.end_date, jp.show_case, jp.published, jp.published_at, jp.updated_by, jp.created_by, jp.deleted_by, jp.deleted_at, jp.updated_at, jp.created_at,
    d.name AS department_name
FROM job_postings jp
JOIN departments d ON jp.department_id = d.id
WHERE 
    jp.deleted_at IS NULL
    AND (
        COALESCE($1, '') = '' 
        OR LOWER(jp.title) LIKE $1
        OR LOWER(d.name) LIKE $1
    )
    AND (
        $2::boolean IS NULL 
        OR jp.published = $2
    )
    AND (
        $3::text IS NULL 
        OR jp.employment_type = $3
    )
    AND (
        $4::boolean IS NULL 
        OR jp.show_case = $4
    )
ORDER BY jp.created_at DESC
LIMIT $6 OFFSET $5
`

type ListJobPostingsParams struct {
	Search         interface{} `json:"search"`
	Published      pgtype.Bool `json:"published"`
	EmploymentType pgtype.Text `json:"employment_type"`
	ShowCase       pgtype.Bool `json:"show_case"`
	Offset         int32       `json:"offset"`
	Limit          int32       `json:"limit"`
}

type ListJobPostingsRow struct {
	ID             int64              `json:"id"`
	Title          string             `json:"title"`
	DepartmentID   int64              `json:"department_id"`
	Location       string             `json:"location"`
	EmploymentType string             `json:"employment_type"`
	Content        string             `json:"content"`
	SalaryRange    pgtype.Text        `json:"salary_range"`
	StartDate      time.Time          `json:"start_date"`
	EndDate        time.Time          `json:"end_date"`
	ShowCase       bool               `json:"show_case"`
	Published      bool               `json:"published"`
	PublishedAt    pgtype.Timestamptz `json:"published_at"`
	UpdatedBy      int64              `json:"updated_by"`
	CreatedBy      int64              `json:"created_by"`
	DeletedBy      pgtype.Int8        `json:"deleted_by"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
	UpdatedAt      time.Time          `json:"updated_at"`
	CreatedAt      time.Time          `json:"created_at"`
	DepartmentName string             `json:"department_name"`
}

func (q *Queries) ListJobPostings(ctx context.Context, arg ListJobPostingsParams) ([]ListJobPostingsRow, error) {
	rows, err := q.db.Query(ctx, listJobPostings,
		arg.Search,
		arg.Published,
		arg.EmploymentType,
		arg.ShowCase,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListJobPostingsRow{}
	for rows.Next() {
		var i ListJobPostingsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.DepartmentID,
			&i.Location,
			&i.EmploymentType,
			&i.Content,
			&i.SalaryRange,
			&i.StartDate,
			&i.EndDate,
			&i.ShowCase,
			&i.Published,
			&i.PublishedAt,
			&i.UpdatedBy,
			&i.CreatedBy,
			&i.DeletedBy,
			&i.DeletedAt,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.DepartmentName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishJobPosting = `-- name: PublishJobPosting :one
UPDATE job_postings
SET published = TRUE,
    published_at = NOW(),
    updated_by = $1,
    updated_at = NOW()
WHERE id = $2
RETURNING id, title, department_id, location, employment_type, content, salary_range, start_date, end_date, show_case, published, published_at, updated_by, created_by, deleted_by, deleted_at, updated_at, created_at
`

type PublishJobPostingParams struct {
	UpdatedBy int64 `json:"updated_by"`
	ID        int64 `json:"id"`
}

func (q *Queries) PublishJobPosting(ctx context.Context, arg PublishJobPostingParams) (JobPosting, error) {
	row := q.db.QueryRow(ctx, publishJobPosting, arg.UpdatedBy, arg.ID)
	var i JobPosting
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DepartmentID,
		&i.Location,
		&i.EmploymentType,
		&i.Content,
		&i.SalaryRange,
		&i.StartDate,
		&i.EndDate,
		&i.ShowCase,
		&i.Published,
		&i.PublishedAt,
		&i.UpdatedBy,
		&i.CreatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateJobPosting = `-- name: UpdateJobPosting :one
UPDATE job_postings
SET title = COALESCE($1, title),
    department_id = COALESCE($2, department_id),
    location = COALESCE($3, location),
    employment_type = COALESCE($4, employment_type),
    content = COALESCE($5, content),
    salary_range = COALESCE($6, salary_range),
    start_date = COALESCE($7, start_date),
    end_date = COALESCE($8, end_date),
    updated_by = $9,
    updated_at = NOW()
WHERE id = $10
RETURNING id, title, department_id, location, employment_type, content, salary_range, start_date, end_date, show_case, published, published_at, updated_by, created_by, deleted_by, deleted_at, updated_at, created_at
`

type UpdateJobPostingParams struct {
	Title          string      `json:"title"`
	DepartmentID   int64       `json:"department_id"`
	Location       string      `json:"location"`
	EmploymentType string      `json:"employment_type"`
	Content        string      `json:"content"`
	SalaryRange    pgtype.Text `json:"salary_range"`
	StartDate      time.Time   `json:"start_date"`
	EndDate        time.Time   `json:"end_date"`
	UpdatedBy      int64       `json:"updated_by"`
	ID             int64       `json:"id"`
}

func (q *Queries) UpdateJobPosting(ctx context.Context, arg UpdateJobPostingParams) (JobPosting, error) {
	row := q.db.QueryRow(ctx, updateJobPosting,
		arg.Title,
		arg.DepartmentID,
		arg.Location,
		arg.EmploymentType,
		arg.Content,
		arg.SalaryRange,
		arg.StartDate,
		arg.EndDate,
		arg.UpdatedBy,
		arg.ID,
	)
	var i JobPosting
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DepartmentID,
		&i.Location,
		&i.EmploymentType,
		&i.Content,
		&i.SalaryRange,
		&i.StartDate,
		&i.EndDate,
		&i.ShowCase,
		&i.Published,
		&i.PublishedAt,
		&i.UpdatedBy,
		&i.CreatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
