// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: merchandise.sql

package generated

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const countProducts = `-- name: CountProducts :one
SELECT COUNT(*) AS total_products
FROM products p
JOIN product_categories c ON p.category_id = c.id
WHERE 
    p.deleted_at IS NULL
    AND (
        COALESCE($1, '') = '' 
        OR LOWER(p.name) LIKE $1
        OR LOWER(c.name) LIKE $1
    )
    AND (
        $2::bigint IS NULL 
        OR p.category_id = $2
    )
`

type CountProductsParams struct {
	Search     interface{} `json:"search"`
	CategoryID pgtype.Int8 `json:"category_id"`
}

func (q *Queries) CountProducts(ctx context.Context, arg CountProductsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts, arg.Search, arg.CategoryID)
	var total_products int64
	err := row.Scan(&total_products)
	return total_products, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (category_id, name, price, image_url, description, updated_by, created_by)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type CreateProductParams struct {
	CategoryID  int64          `json:"category_id"`
	Name        string         `json:"name"`
	Price       pgtype.Numeric `json:"price"`
	ImageUrl    []string       `json:"image_url"`
	Description pgtype.Text    `json:"description"`
	UpdatedBy   int64          `json:"updated_by"`
	CreatedBy   int64          `json:"created_by"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (int64, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.CategoryID,
		arg.Name,
		arg.Price,
		arg.ImageUrl,
		arg.Description,
		arg.UpdatedBy,
		arg.CreatedBy,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE products
SET 
    deleted_at = NOW(), 
    deleted_by = $1
WHERE id = $2
`

type DeleteProductParams struct {
	DeletedBy pgtype.Int8 `json:"deleted_by"`
	ID        int64       `json:"id"`
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) error {
	_, err := q.db.Exec(ctx, deleteProduct, arg.DeletedBy, arg.ID)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT p.id, p.category_id, p.name, p.price, p.image_url, p.description, p.items_sold, p.updated_by, p.created_by, p.deleted_by, p.deleted_at, p.updated_at, p.created_at,
       c.name AS category_name
FROM products p
JOIN product_categories c ON p.category_id = c.id
WHERE p.id = $1 AND p.deleted_at IS NULL
`

type GetProductRow struct {
	ID           int64              `json:"id"`
	CategoryID   int64              `json:"category_id"`
	Name         string             `json:"name"`
	Price        pgtype.Numeric     `json:"price"`
	ImageUrl     []string           `json:"image_url"`
	Description  pgtype.Text        `json:"description"`
	ItemsSold    int32              `json:"items_sold"`
	UpdatedBy    int64              `json:"updated_by"`
	CreatedBy    int64              `json:"created_by"`
	DeletedBy    pgtype.Int8        `json:"deleted_by"`
	DeletedAt    pgtype.Timestamptz `json:"deleted_at"`
	UpdatedAt    time.Time          `json:"updated_at"`
	CreatedAt    time.Time          `json:"created_at"`
	CategoryName string             `json:"category_name"`
}

func (q *Queries) GetProduct(ctx context.Context, id int64) (GetProductRow, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i GetProductRow
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Price,
		&i.ImageUrl,
		&i.Description,
		&i.ItemsSold,
		&i.UpdatedBy,
		&i.CreatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.CategoryName,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT p.id, p.category_id, p.name, p.price, p.image_url, p.description, p.items_sold, p.updated_by, p.created_by, p.deleted_by, p.deleted_at, p.updated_at, p.created_at,
       c.name AS category_name
FROM products p
JOIN product_categories c ON p.category_id = c.id
WHERE 
    p.deleted_at IS NULL
    AND (
        COALESCE($1::text, '') = '' 
        OR LOWER(p.name) LIKE $1
        OR LOWER(c.name) LIKE $1
    )
    AND (
        $2::bigint IS NULL 
        OR p.category_id = $2
    )
ORDER BY p.created_at DESC
LIMIT $4 OFFSET $3
`

type ListProductsParams struct {
	Search     pgtype.Text `json:"search"`
	CategoryID pgtype.Int8 `json:"category_id"`
	Offset     int32       `json:"offset"`
	Limit      int32       `json:"limit"`
}

type ListProductsRow struct {
	ID           int64              `json:"id"`
	CategoryID   int64              `json:"category_id"`
	Name         string             `json:"name"`
	Price        pgtype.Numeric     `json:"price"`
	ImageUrl     []string           `json:"image_url"`
	Description  pgtype.Text        `json:"description"`
	ItemsSold    int32              `json:"items_sold"`
	UpdatedBy    int64              `json:"updated_by"`
	CreatedBy    int64              `json:"created_by"`
	DeletedBy    pgtype.Int8        `json:"deleted_by"`
	DeletedAt    pgtype.Timestamptz `json:"deleted_at"`
	UpdatedAt    time.Time          `json:"updated_at"`
	CreatedAt    time.Time          `json:"created_at"`
	CategoryName string             `json:"category_name"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]ListProductsRow, error) {
	rows, err := q.db.Query(ctx, listProducts,
		arg.Search,
		arg.CategoryID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductsRow{}
	for rows.Next() {
		var i ListProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Price,
			&i.ImageUrl,
			&i.Description,
			&i.ItemsSold,
			&i.UpdatedBy,
			&i.CreatedBy,
			&i.DeletedBy,
			&i.DeletedAt,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.CategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const productExists = `-- name: ProductExists :one
SELECT EXISTS (SELECT 1 FROM products WHERE id = $1 AND deleted_at IS NULL)
`

func (q *Queries) ProductExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, productExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET category_id = COALESCE($1, category_id),
    name = COALESCE($2, name),
    price = COALESCE($3, price),
    image_url = COALESCE($4, image_url),
    description = COALESCE($5, description),
    items_sold = COALESCE($6, items_sold),
    updated_by = $7,
    updated_at = NOW()
WHERE id = $8
RETURNING id, category_id, name, price, image_url, description, items_sold, updated_by, created_by, deleted_by, deleted_at, updated_at, created_at
`

type UpdateProductParams struct {
	CategoryID  pgtype.Int8    `json:"category_id"`
	Name        pgtype.Text    `json:"name"`
	Price       pgtype.Numeric `json:"price"`
	ImageUrl    []string       `json:"image_url"`
	Description pgtype.Text    `json:"description"`
	ItemsSold   pgtype.Int4    `json:"items_sold"`
	UpdatedBy   int64          `json:"updated_by"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.CategoryID,
		arg.Name,
		arg.Price,
		arg.ImageUrl,
		arg.Description,
		arg.ItemsSold,
		arg.UpdatedBy,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Price,
		&i.ImageUrl,
		&i.Description,
		&i.ItemsSold,
		&i.UpdatedBy,
		&i.CreatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateProductItemSold = `-- name: UpdateProductItemSold :one
UPDATE products
SET items_sold = $1
WHERE id = $2
RETURNING id
`

type UpdateProductItemSoldParams struct {
	ItemsSold int32 `json:"items_sold"`
	ID        int64 `json:"id"`
}

func (q *Queries) UpdateProductItemSold(ctx context.Context, arg UpdateProductItemSoldParams) (int64, error) {
	row := q.db.QueryRow(ctx, updateProductItemSold, arg.ItemsSold, arg.ID)
	var id int64
	err := row.Scan(&id)
	return id, err
}
