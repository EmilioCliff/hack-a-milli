// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chats.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addMessageToChat = `-- name: AddMessageToChat :exec
UPDATE user_chats
SET messages = $2
WHERE id = $1
`

type AddMessageToChatParams struct {
	ID       int64  `json:"id"`
	Messages []byte `json:"messages"`
}

func (q *Queries) AddMessageToChat(ctx context.Context, arg AddMessageToChatParams) error {
	_, err := q.db.Exec(ctx, addMessageToChat, arg.ID, arg.Messages)
	return err
}

const countUserChats = `-- name: CountUserChats :one
SELECT COUNT(*) FROM user_chats
WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) CountUserChats(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countUserChats, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCompanyDoc = `-- name: CreateCompanyDoc :one
INSERT INTO company_docs (title, content)
VALUES ($1, $2)
RETURNING id, title, content, deleted_at, created_at
`

type CreateCompanyDocParams struct {
	Title   string `json:"title"`
	Content string `json:"content"`
}

func (q *Queries) CreateCompanyDoc(ctx context.Context, arg CreateCompanyDocParams) (CompanyDoc, error) {
	row := q.db.QueryRow(ctx, createCompanyDoc, arg.Title, arg.Content)
	var i CompanyDoc
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createUserChat = `-- name: CreateUserChat :one
 INSERT INTO user_chats (title, user_id, messages)
 VALUES ($1, $2, $3)
 RETURNING id, title, user_id, messages, deleted_at, created_at
`

type CreateUserChatParams struct {
	Title    string `json:"title"`
	UserID   int64  `json:"user_id"`
	Messages []byte `json:"messages"`
}

func (q *Queries) CreateUserChat(ctx context.Context, arg CreateUserChatParams) (UserChat, error) {
	row := q.db.QueryRow(ctx, createUserChat, arg.Title, arg.UserID, arg.Messages)
	var i UserChat
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Messages,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChat = `-- name: DeleteChat :exec
UPDATE user_chats
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeleteChat(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteChat, id)
	return err
}

const deleteCompanyDoc = `-- name: DeleteCompanyDoc :exec
UPDATE company_docs
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeleteCompanyDoc(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCompanyDoc, id)
	return err
}

const getChatByID = `-- name: GetChatByID :one
SELECT id, title, user_id, messages, deleted_at, created_at FROM user_chats
WHERE id = $1
`

func (q *Queries) GetChatByID(ctx context.Context, id int64) (UserChat, error) {
	row := q.db.QueryRow(ctx, getChatByID, id)
	var i UserChat
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Messages,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getCompanyDocByID = `-- name: GetCompanyDocByID :one
SELECT id, title, content, deleted_at, created_at FROM company_docs
WHERE id = $1
`

func (q *Queries) GetCompanyDocByID(ctx context.Context, id int64) (CompanyDoc, error) {
	row := q.db.QueryRow(ctx, getCompanyDocByID, id)
	var i CompanyDoc
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getCompanyDocs = `-- name: GetCompanyDocs :many
SELECT id, title, content, deleted_at, created_at FROM company_docs
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetCompanyDocs(ctx context.Context) ([]CompanyDoc, error) {
	rows, err := q.db.Query(ctx, getCompanyDocs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CompanyDoc{}
	for rows.Next() {
		var i CompanyDoc
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.DeletedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserChats = `-- name: GetUserChats :many
SELECT id, title, user_id, messages, deleted_at, created_at FROM user_chats
WHERE user_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserChatsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUserChats(ctx context.Context, arg GetUserChatsParams) ([]UserChat, error) {
	rows, err := q.db.Query(ctx, getUserChats, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserChat{}
	for rows.Next() {
		var i UserChat
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserID,
			&i.Messages,
			&i.DeletedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompanyDoc = `-- name: UpdateCompanyDoc :one
UPDATE company_docs
SET title = COALESCE($1, title), 
    content = COALESCE($2, content)
WHERE id = $3
RETURNING id, title, content, deleted_at, created_at
`

type UpdateCompanyDocParams struct {
	Title   pgtype.Text `json:"title"`
	Content pgtype.Text `json:"content"`
	ID      int64       `json:"id"`
}

func (q *Queries) UpdateCompanyDoc(ctx context.Context, arg UpdateCompanyDocParams) (CompanyDoc, error) {
	row := q.db.QueryRow(ctx, updateCompanyDoc, arg.Title, arg.Content, arg.ID)
	var i CompanyDoc
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}
