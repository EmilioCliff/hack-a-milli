// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: departments.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countDepartments = `-- name: CountDepartments :one
SELECT COUNT(*) FROM departments
WHERE
    (
        COALESCE($1::text, '') = ''
        OR LOWER(name) LIKE $1
    )
`

func (q *Queries) CountDepartments(ctx context.Context, search pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, countDepartments, search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDepartment = `-- name: CreateDepartment :one
INSERT INTO departments (name)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreateDepartment(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, createDepartment, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const departmentExists = `-- name: DepartmentExists :one
SELECT EXISTS (SELECT 1 FROM departments WHERE id = $1) AS exists
`

func (q *Queries) DepartmentExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, departmentExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getDepartment = `-- name: GetDepartment :one
SELECT id, name FROM departments
WHERE id = $1
`

func (q *Queries) GetDepartment(ctx context.Context, id int64) (Department, error) {
	row := q.db.QueryRow(ctx, getDepartment, id)
	var i Department
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listDepartments = `-- name: ListDepartments :many
SELECT id, name FROM departments
WHERE
    (
        COALESCE($1::text, '') = ''
        OR LOWER(name) LIKE $1
    )
ORDER BY name DESC
LIMIT $3 OFFSET $2
`

type ListDepartmentsParams struct {
	Search pgtype.Text `json:"search"`
	Offset int32       `json:"offset"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) ListDepartments(ctx context.Context, arg ListDepartmentsParams) ([]Department, error) {
	rows, err := q.db.Query(ctx, listDepartments, arg.Search, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Department{}
	for rows.Next() {
		var i Department
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDepartment = `-- name: UpdateDepartment :exec
UPDATE departments
SET name = $1
WHERE id = $2
`

type UpdateDepartmentParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) error {
	_, err := q.db.Exec(ctx, updateDepartment, arg.Name, arg.ID)
	return err
}
